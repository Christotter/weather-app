{"ast":null,"code":"var _jsxFileName = \"D:\\\\DevOps\\\\weather-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [locations, setLocations] = useState([]);\n  const [hottestLocation, setHottestLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const continentsCoordinates = {\n    Africa: {\n      latMin: -37,\n      latMax: 37,\n      lonMin: -18,\n      lonMax: 51\n    },\n    Asia: {\n      latMin: 10,\n      latMax: 80,\n      lonMin: 60,\n      lonMax: 180\n    },\n    Europe: {\n      latMin: 35,\n      latMax: 72,\n      lonMin: -31,\n      lonMax: 40\n    },\n    NorthAmerica: {\n      latMin: 24,\n      latMax: 72,\n      lonMin: -170,\n      lonMax: -60\n    },\n    SouthAmerica: {\n      latMin: -55,\n      latMax: 12,\n      lonMin: -80,\n      lonMax: -35\n    },\n    Oceania: {\n      latMin: -50,\n      latMax: -10,\n      lonMin: 120,\n      lonMax: 180\n    }\n  };\n\n  // Fonction pour générer des coordonnées aléatoires\n  const getRandomCoordinates = useCallback(continent => {\n    const {\n      latMin,\n      latMax,\n      lonMin,\n      lonMax\n    } = continentsCoordinates[continent];\n    const lat = Math.random() * (latMax - latMin) + latMin;\n    const lon = Math.random() * (lonMax - lonMin) + lonMin;\n    return {\n      lat,\n      lon\n    };\n  }, []);\n\n  // Fonction pour récupérer la ville et le pays les plus proches d'une coordonnée avec GeoNames\n  const getCityFromCoordinates = useCallback(async (lat, lon) => {\n    const username = 'christotter'; // Ton nom d'utilisateur GeoNames\n    try {\n      const response = await fetch(`http://api.geonames.org/findNearbyPlaceNameJSON?lat=${lat}&lng=${lon}&username=${username}`);\n      const data = await response.json();\n      if (data.geonames && data.geonames[0]) {\n        return {\n          name: data.geonames[0].name,\n          country: data.geonames[0].countryName\n        };\n      }\n      return null;\n    } catch (err) {\n      console.error('Error fetching city:', err);\n      return null;\n    }\n  }, []);\n\n  // Fonction pour récupérer la température\n  const fetchTemperature = useCallback(async (lat, lon) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n      const data = await response.json();\n      return data.current_weather.temperature;\n    } catch (error) {\n      console.error(\"Error fetching temperature:\", error);\n      return null;\n    }\n  }, []);\n\n  // Fonction pour obtenir la localisation la plus chaude\n  const getHottestLocation = useCallback(async () => {\n    try {\n      setLoading(true);\n      const selectedLocations = [];\n      for (let continent of Object.keys(continentsCoordinates)) {\n        const {\n          lat,\n          lon\n        } = getRandomCoordinates(continent);\n        const cityData = await getCityFromCoordinates(lat, lon);\n        if (cityData) {\n          const temperature = await fetchTemperature(lat, lon);\n          selectedLocations.push({\n            name: cityData.name,\n            country: cityData.country,\n            lat,\n            lon,\n            temperature\n          });\n        } else {\n          selectedLocations.push({\n            continent,\n            message: `No location found for ${continent}`\n          });\n        }\n      }\n      setLocations(selectedLocations);\n      const hottest = selectedLocations.filter(item => item.temperature).reduce((max, current) => current.temperature > max.temperature ? current : max, selectedLocations[0]);\n      setHottestLocation(hottest);\n    } catch (error) {\n      setError(\"Failed to fetch data.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [getRandomCoordinates, getCityFromCoordinates, fetchTemperature]);\n  useEffect(() => {\n    getHottestLocation();\n  }, [getHottestLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hottest Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [hottestLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"The hottest location is \", hottestLocation.name, \" (\", hottestLocation.country, \") with a temperature of \", hottestLocation.temperature, \"\\xB0C.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Locations from each continent:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: locations.map((location, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: location.message ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: location.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [location.name, \", \", location.country, \": \", location.temperature, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"V6f1OtpjYSb6iHQu4ZWbB4txKdk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","App","_s","locations","setLocations","hottestLocation","setHottestLocation","loading","setLoading","error","setError","continentsCoordinates","Africa","latMin","latMax","lonMin","lonMax","Asia","Europe","NorthAmerica","SouthAmerica","Oceania","getRandomCoordinates","continent","lat","Math","random","lon","getCityFromCoordinates","username","response","fetch","data","json","geonames","name","country","countryName","err","console","fetchTemperature","current_weather","temperature","getHottestLocation","selectedLocations","Object","keys","cityData","push","message","hottest","filter","item","reduce","max","current","children","fileName","_jsxFileName","lineNumber","columnNumber","map","location","index","_c","$RefreshReg$"],"sources":["D:/DevOps/weather-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nconst App = () => {\n  const [locations, setLocations] = useState([]);\n  const [hottestLocation, setHottestLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const continentsCoordinates = {\n    Africa: { latMin: -37, latMax: 37, lonMin: -18, lonMax: 51 },\n    Asia: { latMin: 10, latMax: 80, lonMin: 60, lonMax: 180 },\n    Europe: { latMin: 35, latMax: 72, lonMin: -31, lonMax: 40 },\n    NorthAmerica: { latMin: 24, latMax: 72, lonMin: -170, lonMax: -60 },\n    SouthAmerica: { latMin: -55, latMax: 12, lonMin: -80, lonMax: -35 },\n    Oceania: { latMin: -50, latMax: -10, lonMin: 120, lonMax: 180 },\n  };\n\n  // Fonction pour générer des coordonnées aléatoires\n  const getRandomCoordinates = useCallback((continent) => {\n    const { latMin, latMax, lonMin, lonMax } = continentsCoordinates[continent];\n    const lat = Math.random() * (latMax - latMin) + latMin;\n    const lon = Math.random() * (lonMax - lonMin) + lonMin;\n    return { lat, lon };\n  }, []);\n\n  // Fonction pour récupérer la ville et le pays les plus proches d'une coordonnée avec GeoNames\n  const getCityFromCoordinates = useCallback(async (lat, lon) => {\n    const username = 'christotter'; // Ton nom d'utilisateur GeoNames\n    try {\n      const response = await fetch(`http://api.geonames.org/findNearbyPlaceNameJSON?lat=${lat}&lng=${lon}&username=${username}`);\n      const data = await response.json();\n      if (data.geonames && data.geonames[0]) {\n        return {\n          name: data.geonames[0].name,\n          country: data.geonames[0].countryName,\n        };\n      }\n      return null;\n    } catch (err) {\n      console.error('Error fetching city:', err);\n      return null;\n    }\n  }, []);\n\n  // Fonction pour récupérer la température\n  const fetchTemperature = useCallback(async (lat, lon) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n      const data = await response.json();\n      return data.current_weather.temperature;\n    } catch (error) {\n      console.error(\"Error fetching temperature:\", error);\n      return null;\n    }\n  }, []);\n\n  // Fonction pour obtenir la localisation la plus chaude\n  const getHottestLocation = useCallback(async () => {\n    try {\n      setLoading(true);\n      const selectedLocations = [];\n\n      for (let continent of Object.keys(continentsCoordinates)) {\n        const { lat, lon } = getRandomCoordinates(continent);\n        const cityData = await getCityFromCoordinates(lat, lon);\n        if (cityData) {\n          const temperature = await fetchTemperature(lat, lon);\n          selectedLocations.push({\n            name: cityData.name,\n            country: cityData.country,\n            lat,\n            lon,\n            temperature,\n          });\n        } else {\n          selectedLocations.push({\n            continent,\n            message: `No location found for ${continent}`,\n          });\n        }\n      }\n\n      setLocations(selectedLocations);\n\n      const hottest = selectedLocations\n        .filter((item) => item.temperature)\n        .reduce((max, current) => (current.temperature > max.temperature ? current : max), selectedLocations[0]);\n      setHottestLocation(hottest);\n    } catch (error) {\n      setError(\"Failed to fetch data.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [getRandomCoordinates, getCityFromCoordinates, fetchTemperature]);\n\n  useEffect(() => {\n    getHottestLocation();\n  }, [getHottestLocation]);\n\n  return (\n    <div>\n      <h1>Hottest Location</h1>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error}</p>\n      ) : (\n        <div>\n          {hottestLocation && (\n            <div>\n              <h2>\n                The hottest location is {hottestLocation.name} ({hottestLocation.country}) with a\n                temperature of {hottestLocation.temperature}°C.\n              </h2>\n            </div>\n          )}\n          <h3>Locations from each continent:</h3>\n          <ul>\n            {locations.map((location, index) => (\n              <li key={index}>\n                {location.message ? (\n                  <span>{location.message}</span>\n                ) : (\n                  <span>\n                    {location.name}, {location.country}: {location.temperature}°C\n                  </span>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}