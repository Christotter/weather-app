{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nfunction App() {\n  const locations = [{\n    name: \"Paris\",\n    lat: 48.8566,\n    lon: 2.3522\n  }, {\n    name: \"New York\",\n    lat: 40.7128,\n    lon: -74.0060\n  }, {\n    name: \"Tokyo\",\n    lat: 35.6895,\n    lon: 139.6917\n  }, {\n    name: \"Sydney\",\n    lat: -33.8688,\n    lon: 151.2093\n  }];\n  const fetchTemperature = async (lat, lon) => {\n    const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n    const data = await response.json();\n    return data.current_weather.temperature;\n  };\n  const getHottestLocation = async () => {\n    const temperatures = await Promise.all(locations.map(async location => {\n      const temp = await fetchTemperature(location.lat, location.lon);\n      return {\n        name: location.name,\n        temperature: temp\n      };\n    }));\n\n    // Trouver la température la plus élevée\n    const hottest = temperatures.reduce((max, current) => current.temperature > max.temperature ? current : max);\n    console.log(`The hottest location is ${hottest.name} with a temperature of ${hottest.temperature}°C.`);\n  };\n  getHottestLocation();\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","App","locations","name","lat","lon","fetchTemperature","response","fetch","data","json","current_weather","temperature","getHottestLocation","temperatures","Promise","all","map","location","temp","hottest","reduce","max","current","console","log","_c","$RefreshReg$"],"sources":["D:/DevOps/weather-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const locations = [\n    { name: \"Paris\", lat: 48.8566, lon: 2.3522 },\n    { name: \"New York\", lat: 40.7128, lon: -74.0060 },\n    { name: \"Tokyo\", lat: 35.6895, lon: 139.6917 },\n    { name: \"Sydney\", lat: -33.8688, lon: 151.2093 }\n  ];\n  \n  const fetchTemperature = async (lat, lon) => {\n    const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n    const data = await response.json();\n    return data.current_weather.temperature;\n  };\n  \n  const getHottestLocation = async () => {\n    const temperatures = await Promise.all(\n      locations.map(async (location) => {\n        const temp = await fetchTemperature(location.lat, location.lon);\n        return { name: location.name, temperature: temp };\n      })\n    );\n  \n    // Trouver la température la plus élevée\n    const hottest = temperatures.reduce((max, current) => (current.temperature > max.temperature ? current : max));\n  \n    console.log(`The hottest location is ${hottest.name} with a temperature of ${hottest.temperature}°C.`);\n  };\n  \n  getHottestLocation();\n  \n}\n\nexport default App;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,SAAS,GAAG,CAChB;IAAEC,IAAI,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAO,CAAC,EAC5C;IAAEF,IAAI,EAAE,UAAU;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE,CAAC;EAAQ,CAAC,EACjD;IAAEF,IAAI,EAAE,OAAO;IAAEC,GAAG,EAAE,OAAO;IAAEC,GAAG,EAAE;EAAS,CAAC,EAC9C;IAAEF,IAAI,EAAE,QAAQ;IAAEC,GAAG,EAAE,CAAC,OAAO;IAAEC,GAAG,EAAE;EAAS,CAAC,CACjD;EAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAOF,GAAG,EAAEC,GAAG,KAAK;IAC3C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAmDJ,GAAG,cAAcC,GAAG,uBAAuB,CAAC;IAC5H,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,eAAe,CAACC,WAAW;EACzC,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,MAAMC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG,CACpCd,SAAS,CAACe,GAAG,CAAC,MAAOC,QAAQ,IAAK;MAChC,MAAMC,IAAI,GAAG,MAAMb,gBAAgB,CAACY,QAAQ,CAACd,GAAG,EAAEc,QAAQ,CAACb,GAAG,CAAC;MAC/D,OAAO;QAAEF,IAAI,EAAEe,QAAQ,CAACf,IAAI;QAAES,WAAW,EAAEO;MAAK,CAAC;IACnD,CAAC,CACH,CAAC;;IAED;IACA,MAAMC,OAAO,GAAGN,YAAY,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAMA,OAAO,CAACX,WAAW,GAAGU,GAAG,CAACV,WAAW,GAAGW,OAAO,GAAGD,GAAI,CAAC;IAE9GE,OAAO,CAACC,GAAG,CAAC,2BAA2BL,OAAO,CAACjB,IAAI,0BAA0BiB,OAAO,CAACR,WAAW,KAAK,CAAC;EACxG,CAAC;EAEDC,kBAAkB,CAAC,CAAC;AAEtB;AAACa,EAAA,GA9BQzB,GAAG;AAgCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}