{"ast":null,"code":"var _jsxFileName = \"D:\\\\DevOps\\\\weather-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [hottestLocation, setHottestLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [allTemperatures, setAllTemperatures] = useState([]);\n\n  const locations = [\n    { name: \"Paris\", lat: 48.8566, lon: 2.3522 },\n    { name: \"New York\", lat: 40.7128, lon: -74.0060 },\n    { name: \"Tokyo\", lat: 35.6895, lon: 139.6917 },\n    { name: \"Sydney\", lat: -33.8688, lon: 151.2093 },\n    { name: \"Székesfehérvár\", lat: 47.1910, lon: 18.4131 },\n    { name: \"Gland\", lat: 46.4167, lon: 6.2667 },\n    { name: \"Lausanne\", lat: 46.5197, lon: 6.6333 },\n    { name: \"Abidjan\", lat: 5.3453, lon: -4.0244 }\n  ];\n\n  const fetchTemperature = async (lat, lon) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n      const data = await response.json();\n      return data.current_weather.temperature;\n    } catch (error) {\n      console.error(\"Error fetching temperature:\", error);\n      return null;\n    }\n  };\n\n  const getHottestLocation = async () => {\n    try {\n      setLoading(true);\n      const temperatures = await Promise.all(\n        locations.map(async (location) => {\n          const temp = await fetchTemperature(location.lat, location.lon);\n          return { name: location.name, temperature: temp };\n        })\n      );\n\n      // Filtrer les lieux avec des températures valides\n      const validTemperatures = temperatures.filter(item => item.temperature !== null);\n\n      // Trouver la température la plus élevée\n      const hottest = validTemperatures.reduce((max, current) => (current.temperature > max.temperature ? current : max), validTemperatures[0]);\n\n      setHottestLocation(hottest);\n      setAllTemperatures(validTemperatures); // Stocker toutes les températures pour affichage\n    } catch (error) {\n      setError(\"Failed to fetch data.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getHottestLocation();\n  }, []);\n\n  return (\n    <div>\n      <h1>Hottest Location</h1>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error}</p>\n      ) : (\n        <div>\n          {hottestLocation && (\n            <div>\n              <h2>The hottest location is {hottestLocation.name} with a temperature of {hottestLocation.temperature}°C.</h2>\n            </div>\n          )}\n          <h3>Temperatures of all locations:</h3>\n          <ul>\n            {allTemperatures.map((location) => (\n              <li key={location.name}>\n                {location.name}: {location.temperature}°C\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [locations, setLocations] = useState([]);\n  const [hottestLocation, setHottestLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const continentsCoordinates = {\n    Africa: {\n      latMin: -37,\n      latMax: 37,\n      lonMin: -18,\n      lonMax: 51\n    },\n    Asia: {\n      latMin: 10,\n      latMax: 80,\n      lonMin: 60,\n      lonMax: 180\n    },\n    Europe: {\n      latMin: 35,\n      latMax: 72,\n      lonMin: -31,\n      lonMax: 40\n    },\n    NorthAmerica: {\n      latMin: 24,\n      latMax: 72,\n      lonMin: -170,\n      lonMax: -60\n    },\n    SouthAmerica: {\n      latMin: -55,\n      latMax: 12,\n      lonMin: -80,\n      lonMax: -35\n    },\n    Oceania: {\n      latMin: -50,\n      latMax: -10,\n      lonMin: 120,\n      lonMax: 180\n    }\n  };\n\n  // Fonction pour générer des coordonnées aléatoires\n  const getRandomCoordinates = continent => {\n    const {\n      latMin,\n      latMax,\n      lonMin,\n      lonMax\n    } = continentsCoordinates[continent];\n    const lat = Math.random() * (latMax - latMin) + latMin;\n    const lon = Math.random() * (lonMax - lonMin) + lonMin;\n    return {\n      lat,\n      lon\n    };\n  };\n\n  // Fonction pour récupérer la ville la plus proche d'une coordonnée avec GeoNames\n  const getCityFromCoordinates = async (lat, lon) => {\n    const username = \"christotter\"; // Ton nom d'utilisateur GeoNames\n    const response = await fetch(`http://api.geonames.org/findNearbyPlaceNameJSON?lat=${lat}&lng=${lon}&username=${username}`);\n    const data = await response.json();\n    if (data.geonames && data.geonames[0]) {\n      return data.geonames[0].name; // Retourner le nom de la ville ou du lieu\n    }\n    return null;\n  };\n\n  // Fonction pour récupérer la température\n  const fetchTemperature = async (lat, lon) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n      const data = await response.json();\n      return data.current_weather.temperature;\n    } catch (error) {\n      console.error(\"Error fetching temperature:\", error);\n      return null;\n    }\n  };\n  const getHottestLocation = async () => {\n    try {\n      setLoading(true);\n      const selectedLocations = [];\n\n      // Sélectionner 5 lieux aléatoires pour chaque continent\n      for (let continent of Object.keys(continentsCoordinates)) {\n        for (let i = 0; i < 5; i++) {\n          const {\n            lat,\n            lon\n          } = getRandomCoordinates(continent);\n          const city = await getCityFromCoordinates(lat, lon);\n          if (city) {\n            const temperature = await fetchTemperature(lat, lon);\n            selectedLocations.push({\n              name: city,\n              lat,\n              lon,\n              temperature\n            });\n          }\n        }\n      }\n      setLocations(selectedLocations);\n\n      // Trouver la ville la plus chaude\n      const hottest = selectedLocations.reduce((max, current) => current.temperature > max.temperature ? current : max, selectedLocations[0]);\n      setHottestLocation(hottest);\n    } catch (error) {\n      setError(\"Failed to fetch data.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    getHottestLocation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hottest Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [hottestLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"The hottest location is \", hottestLocation.name, \" with a temperature of \", hottestLocation.temperature, \"\\xB0C.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Temperatures of all locations:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: locations.map(location => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [location.name, \": \", location.temperature, \"\\xB0C\"]\n        }, location.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/zXBDxKQQRGk6KbvPcFGGQb8Atc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","locations","setLocations","hottestLocation","setHottestLocation","loading","setLoading","error","setError","continentsCoordinates","Africa","latMin","latMax","lonMin","lonMax","Asia","Europe","NorthAmerica","SouthAmerica","Oceania","getRandomCoordinates","continent","lat","Math","random","lon","getCityFromCoordinates","username","response","fetch","data","json","geonames","name","fetchTemperature","current_weather","temperature","console","getHottestLocation","selectedLocations","Object","keys","i","city","push","hottest","reduce","max","current","children","fileName","_jsxFileName","lineNumber","columnNumber","map","location","_c","$RefreshReg$"],"sources":["D:/DevOps/weather-app/frontend/src/App.js"],"sourcesContent":["/* import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [hottestLocation, setHottestLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [allTemperatures, setAllTemperatures] = useState([]);\n\n  const locations = [\n    { name: \"Paris\", lat: 48.8566, lon: 2.3522 },\n    { name: \"New York\", lat: 40.7128, lon: -74.0060 },\n    { name: \"Tokyo\", lat: 35.6895, lon: 139.6917 },\n    { name: \"Sydney\", lat: -33.8688, lon: 151.2093 },\n    { name: \"Székesfehérvár\", lat: 47.1910, lon: 18.4131 },\n    { name: \"Gland\", lat: 46.4167, lon: 6.2667 },\n    { name: \"Lausanne\", lat: 46.5197, lon: 6.6333 },\n    { name: \"Abidjan\", lat: 5.3453, lon: -4.0244 }\n  ];\n\n  const fetchTemperature = async (lat, lon) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n      const data = await response.json();\n      return data.current_weather.temperature;\n    } catch (error) {\n      console.error(\"Error fetching temperature:\", error);\n      return null;\n    }\n  };\n\n  const getHottestLocation = async () => {\n    try {\n      setLoading(true);\n      const temperatures = await Promise.all(\n        locations.map(async (location) => {\n          const temp = await fetchTemperature(location.lat, location.lon);\n          return { name: location.name, temperature: temp };\n        })\n      );\n\n      // Filtrer les lieux avec des températures valides\n      const validTemperatures = temperatures.filter(item => item.temperature !== null);\n\n      // Trouver la température la plus élevée\n      const hottest = validTemperatures.reduce((max, current) => (current.temperature > max.temperature ? current : max), validTemperatures[0]);\n\n      setHottestLocation(hottest);\n      setAllTemperatures(validTemperatures); // Stocker toutes les températures pour affichage\n    } catch (error) {\n      setError(\"Failed to fetch data.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getHottestLocation();\n  }, []);\n\n  return (\n    <div>\n      <h1>Hottest Location</h1>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error}</p>\n      ) : (\n        <div>\n          {hottestLocation && (\n            <div>\n              <h2>The hottest location is {hottestLocation.name} with a temperature of {hottestLocation.temperature}°C.</h2>\n            </div>\n          )}\n          <h3>Temperatures of all locations:</h3>\n          <ul>\n            {allTemperatures.map((location) => (\n              <li key={location.name}>\n                {location.name}: {location.temperature}°C\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n */\n\nimport React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [locations, setLocations] = useState([]);\n  const [hottestLocation, setHottestLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const continentsCoordinates = {\n    Africa: { latMin: -37, latMax: 37, lonMin: -18, lonMax: 51 },\n    Asia: { latMin: 10, latMax: 80, lonMin: 60, lonMax: 180 },\n    Europe: { latMin: 35, latMax: 72, lonMin: -31, lonMax: 40 },\n    NorthAmerica: { latMin: 24, latMax: 72, lonMin: -170, lonMax: -60 },\n    SouthAmerica: { latMin: -55, latMax: 12, lonMin: -80, lonMax: -35 },\n    Oceania: { latMin: -50, latMax: -10, lonMin: 120, lonMax: 180 },\n  };\n\n  // Fonction pour générer des coordonnées aléatoires\n  const getRandomCoordinates = (continent) => {\n    const { latMin, latMax, lonMin, lonMax } = continentsCoordinates[continent];\n    const lat = (Math.random() * (latMax - latMin)) + latMin;\n    const lon = (Math.random() * (lonMax - lonMin)) + lonMin;\n    return { lat, lon };\n  };\n\n  // Fonction pour récupérer la ville la plus proche d'une coordonnée avec GeoNames\n  const getCityFromCoordinates = async (lat, lon) => {\n    const username = \"christotter\"; // Ton nom d'utilisateur GeoNames\n    const response = await fetch(`http://api.geonames.org/findNearbyPlaceNameJSON?lat=${lat}&lng=${lon}&username=${username}`);\n    const data = await response.json();\n    if (data.geonames && data.geonames[0]) {\n      return data.geonames[0].name; // Retourner le nom de la ville ou du lieu\n    }\n    return null;\n  };\n\n  // Fonction pour récupérer la température\n  const fetchTemperature = async (lat, lon) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n      const data = await response.json();\n      return data.current_weather.temperature;\n    } catch (error) {\n      console.error(\"Error fetching temperature:\", error);\n      return null;\n    }\n  };\n\n  const getHottestLocation = async () => {\n    try {\n      setLoading(true);\n      const selectedLocations = [];\n\n      // Sélectionner 5 lieux aléatoires pour chaque continent\n      for (let continent of Object.keys(continentsCoordinates)) {\n        for (let i = 0; i < 5; i++) {\n          const { lat, lon } = getRandomCoordinates(continent);\n          const city = await getCityFromCoordinates(lat, lon);\n          if (city) {\n            const temperature = await fetchTemperature(lat, lon);\n            selectedLocations.push({ name: city, lat, lon, temperature });\n          }\n        }\n      }\n\n      setLocations(selectedLocations);\n\n      // Trouver la ville la plus chaude\n      const hottest = selectedLocations.reduce((max, current) => (current.temperature > max.temperature ? current : max), selectedLocations[0]);\n      setHottestLocation(hottest);\n    } catch (error) {\n      setError(\"Failed to fetch data.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getHottestLocation();\n  }, []);\n\n  return (\n    <div>\n      <h1>Hottest Location</h1>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error}</p>\n      ) : (\n        <div>\n          {hottestLocation && (\n            <div>\n              <h2>The hottest location is {hottestLocation.name} with a temperature of {hottestLocation.temperature}°C.</h2>\n            </div>\n          )}\n          <h3>Temperatures of all locations:</h3>\n          <ul>\n            {locations.map((location) => (\n              <li key={location.name}>\n                {location.name}: {location.temperature}°C\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}