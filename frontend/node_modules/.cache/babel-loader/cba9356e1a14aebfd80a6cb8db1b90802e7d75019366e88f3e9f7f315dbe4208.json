{"ast":null,"code":"var _jsxFileName = \"D:\\\\DevOps\\\\weather-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [hottestLocation, setHottestLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [allTemperatures, setAllTemperatures] = useState([]);\n  const locations = [{\n    name: \"Paris\",\n    lat: 48.8566,\n    lon: 2.3522\n  }, {\n    name: \"New York\",\n    lat: 40.7128,\n    lon: -74.0060\n  }, {\n    name: \"Tokyo\",\n    lat: 35.6895,\n    lon: 139.6917\n  }, {\n    name: \"Sydney\",\n    lat: -33.8688,\n    lon: 151.2093\n  }, {\n    name: \"Székesfehérvár\",\n    lat: 47.1910,\n    lon: 18.4131\n  }, {\n    name: \"Gland\",\n    lat: 46.4167,\n    lon: 6.2667\n  }, {\n    name: \"Lausanne\",\n    lat: 46.5197,\n    lon: 6.6333\n  }, {\n    name: \"Abidjan\",\n    lat: 5.3453,\n    lon: -4.0244\n  }];\n  const fetchTemperature = async (lat, lon) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n      const data = await response.json();\n      return data.current_weather.temperature;\n    } catch (error) {\n      console.error(\"Error fetching temperature:\", error);\n      return null;\n    }\n  };\n  const getHottestLocation = async () => {\n    try {\n      setLoading(true);\n      const temperatures = await Promise.all(locations.map(async location => {\n        const temp = await fetchTemperature(location.lat, location.lon);\n        return {\n          name: location.name,\n          temperature: temp\n        };\n      }));\n\n      // Filtrer les lieux avec des températures valides\n      const validTemperatures = temperatures.filter(item => item.temperature !== null);\n\n      // Trouver la température la plus élevée\n      const hottest = validTemperatures.reduce((max, current) => current.temperature > max.temperature ? current : max, validTemperatures[0]);\n      setHottestLocation(hottest);\n      setAllTemperatures(validTemperatures); // Stocker toutes les températures pour affichage\n    } catch (error) {\n      setError(\"Failed to fetch data.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    getHottestLocation();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hottest Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [hottestLocation && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"The hottest location is \", hottestLocation.name, \" with a temperature of \", hottestLocation.temperature, \"\\xB0C.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Temperatures of all locations:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: allTemperatures.map(location => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [location.name, \": \", location.temperature, \"\\xB0C\"]\n        }, location.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"h0ckDazMvVgsmmtW9EEhclIaMjo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","hottestLocation","setHottestLocation","loading","setLoading","error","setError","allTemperatures","setAllTemperatures","locations","name","lat","lon","fetchTemperature","response","fetch","data","json","current_weather","temperature","console","getHottestLocation","temperatures","Promise","all","map","location","temp","validTemperatures","filter","item","hottest","reduce","max","current","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DevOps/weather-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [hottestLocation, setHottestLocation] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [allTemperatures, setAllTemperatures] = useState([]);\n\n  const locations = [\n    { name: \"Paris\", lat: 48.8566, lon: 2.3522 },\n    { name: \"New York\", lat: 40.7128, lon: -74.0060 },\n    { name: \"Tokyo\", lat: 35.6895, lon: 139.6917 },\n    { name: \"Sydney\", lat: -33.8688, lon: 151.2093 },\n    { name: \"Székesfehérvár\", lat: 47.1910, lon: 18.4131 },\n    { name: \"Gland\", lat: 46.4167, lon: 6.2667 },\n    { name: \"Lausanne\", lat: 46.5197, lon: 6.6333 },\n    { name: \"Abidjan\", lat: 5.3453, lon: -4.0244 }\n  ];\n\n  const fetchTemperature = async (lat, lon) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);\n      const data = await response.json();\n      return data.current_weather.temperature;\n    } catch (error) {\n      console.error(\"Error fetching temperature:\", error);\n      return null;\n    }\n  };\n\n  const getHottestLocation = async () => {\n    try {\n      setLoading(true);\n      const temperatures = await Promise.all(\n        locations.map(async (location) => {\n          const temp = await fetchTemperature(location.lat, location.lon);\n          return { name: location.name, temperature: temp };\n        })\n      );\n\n      // Filtrer les lieux avec des températures valides\n      const validTemperatures = temperatures.filter(item => item.temperature !== null);\n\n      // Trouver la température la plus élevée\n      const hottest = validTemperatures.reduce((max, current) => (current.temperature > max.temperature ? current : max), validTemperatures[0]);\n\n      setHottestLocation(hottest);\n      setAllTemperatures(validTemperatures); // Stocker toutes les températures pour affichage\n    } catch (error) {\n      setError(\"Failed to fetch data.\");\n      console.error(\"Error:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getHottestLocation();\n  }, []);\n\n  return (\n    <div>\n      <h1>Hottest Location</h1>\n      {loading ? (\n        <p>Loading...</p>\n      ) : error ? (\n        <p>{error}</p>\n      ) : (\n        <div>\n          {hottestLocation && (\n            <div>\n              <h2>The hottest location is {hottestLocation.name} with a temperature of {hottestLocation.temperature}°C.</h2>\n            </div>\n          )}\n          <h3>Temperatures of all locations:</h3>\n          <ul>\n            {allTemperatures.map((location) => (\n              <li key={location.name}>\n                {location.name}: {location.temperature}°C\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}